name: Build and Deploy Code

# run on push and pull requests to all branches
on: [push, pull_request]

# job, on machine, and steps
jobs:
  build: # job no 1
    environment:
      name: testing
    # job-specific env vars
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    # Service containers to run with `job1`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        # ports; got errors doing it via secrets so hard code
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      # Pull git repo using an action from the marketplace
      - name: pulling git repo # human readable name for the step
        uses: actions/checkout@v2 
      # eg of a second step
      # - name: say hi to Liz
      #   run: echo "hello Liz" # run any cmd on cli of this ubuntu machine

      # Install python
      - name: install Python version 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Upgdate pip from cli of the runner/VM
      - name: update pip
        run: python -m pip install --upgrade pip

      # Install dependencies from cli of runner
      - name: install all dependencies
        run: pip install -r requirements.txt
      
      # Install & run pytest
      - name: test with pytest
        run: | # pipe to run several commands
          pip install pytest
          pytest

      # # Set up Docker & use cached image to minimize pulls, free build minutes 
      # # login to docker
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # # set up a buildx
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # # build and push
      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}
  
# job no 2
  deploy:
    runs-on: ubuntu-latest
    needs: [build] # build job above must run first

    steps:
      - name: deploying stuff
        run: echo "testing two jobs before deploying some stuff"